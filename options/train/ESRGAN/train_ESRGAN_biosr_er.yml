# general settings
name: ESRGAN_biosr_er
model_type: ESRGANModel
scale: 1
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    name: BioSR
    type: BioSRDataset
    dataroot: /group/jug/Anirban/Datasets/BioSR/ER_SuperRes/train_crop/
    phase: train
    use_hflip: false
    use_rot: false
    input_mean: 101.77709
    input_std: 4.962002
    target_mean: 7221.413
    target_std: 6812.191

    num_worker_per_gpu: 8
    batch_size_per_gpu: 16  # 4240 images / 16 batch size = 265 iterations per epoch

  val:
    name: BioSR_val
    type: BioSRDataset
    phase: val
    dataroot: /group/jug/Anirban/Datasets/BioSR/ER_SuperRes/val_crop/
    input_mean: 101.77709
    input_std: 4.962002
    target_mean: 7221.413
    target_std: 6812.191

# network structures
network_g:
  type: RRDBNet
  num_in_ch: 1
  num_out_ch: 1
  num_feat: 64
  num_block: 23
  scale: 1

network_d:
  type: VGGStyleDiscriminator
  num_in_ch: 1
  num_feat: 64

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  optim_g:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [13250, 19875]  # At epochs 50 and 75 (265*50=13250, 265*75=19875)
    gamma: 0.5

  total_iter: 53000  # 200 epochs * 265 iterations per epoch (4240/16)
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: !!float 1e-2
    reduction: mean
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      'conv5_4': 1  # before relu
    vgg_type: vgg19
    use_input_norm: true
    range_norm: false
    perceptual_weight: 1.0
    style_weight: 0
    criterion: l1
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 5e-3

  net_d_iters: 1
  net_d_init_iters: 0

# validation settings
val:
  val_freq: 265  # Validate after every epoch (265 iterations = 1 epoch)
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    loss: # track training loss
      type: calculate_loss

# logging settings
logger:
  print_freq: 66  # Print four times per epoch (265/4 = 66)
  save_checkpoint_freq: 265  # Save checkpoint after every epoch
  use_tb_logger: true
  wandb:
    project: basicsr
    resume_id: ~
